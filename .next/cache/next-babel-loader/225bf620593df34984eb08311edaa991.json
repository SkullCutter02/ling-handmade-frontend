{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useState, useEffect } from \"react\";\nexport const CartContext = /*#__PURE__*/createContext(null);\nexport const CartProvider = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    setItem: function (item) {\n      setState(old => _objectSpread(_objectSpread({}, old), {}, {\n        cartItems: [...old.cartItems, item]\n      }));\n    },\n    removeItem: function (item) {\n      setState(old => _objectSpread(_objectSpread({}, old), {}, {\n        cartItems: old.cartItems.filter(cartItem => cartItem.name !== item.name)\n      }));\n    },\n    cartItems: []\n  });\n  useEffect(() => {\n    const cartItems = localStorage.getItem(\"cartItems\");\n\n    if (cartItems) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        cartItems: JSON.parse(cartItems)\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    if (state.cartItems) {\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    }\n  }, [state]);\n  return /*#__PURE__*/_jsx(CartContext.Provider, {\n    value: state,\n    children: props.children\n  });\n};","map":null,"metadata":{},"sourceType":"module"}